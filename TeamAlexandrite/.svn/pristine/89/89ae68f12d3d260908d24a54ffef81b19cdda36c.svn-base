using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CourierManager
{
    public abstract class Freight
    {
        private decimal weight;
        private decimal width;
        private decimal height;
        private decimal depth;

        public decimal Weight
        {
            get { return this.weight; }
            set 
            {
                if (value<=0)
                {
                    throw new ArgumentException("The weight must be positive number.");
                }
                this.weight = value; 
            }
        }

        public decimal Width
        {
            get { return width; }
            set
            {
                if (value <= 0)
                {
                    throw new ArgumentException("The width must be positive number.");
                }
                this.width = value; 
            }
        }

        public decimal Height
        {
            get { return height; }
            set 
            {
                if (value <= 0)
                {
                    throw new ArgumentException("The height must be positive number.");
                }
                this.height = value; 
            }
        }

        public decimal Depth
        {
            get { return depth; }
            set 
            {
                if (value <= 0)
                {
                    throw new ArgumentException("The depth must be positive number.");
                }
                this.depth = value; 
            }
        }
        
        public string BillOfLading { get; set; }
        public FreightState State { get; set; }

        public Freight(decimal weight)
        {
            this.Weight = weight;
            this.BillOfLading = GenerateNextBillOfLading();
            this.State = FreightState.Processed;
        }

        public Freight(decimal weight, decimal width, decimal height, decimal depth)
            : this(weight)
        {
            this.Width = width;
            this.Height = height;
            this.Depth = depth;
        }

        public string GenerateNextBillOfLading()
        {
            List<string> allBills = LoadAllBillOfLading();
            string lastRow = allBills[allBills.Count() - 1];
            string nextBillOfLading=(ulong.Parse(lastRow) + 1).ToString().PadLeft(15,'0');
            StreamWriter writeInFile = new StreamWriter(@"..\..\ListOfBillOfLadings.txt", true);
            using (writeInFile)
            {
                writeInFile.WriteLine(nextBillOfLading);
            }
            return nextBillOfLading;
        }

        public void DeleteBillOfLading()
        {
            List<string> allBills = LoadAllBillOfLading();
            StreamWriter writeInFile = new StreamWriter(@"..\..\ListOfBillOfLadings.txt");
            using (writeInFile)
            {
                foreach (string bill in allBills)
                {
                    if (bill!=this.BillOfLading)
                    {
                        writeInFile.WriteLine(bill);
                    }
                }
            }
        }
  
        private List<string> LoadAllBillOfLading()
        {
            StreamReader readFromFile = new StreamReader(@"..\..\ListOfBillOfLadings.txt");
            List<string> allRows = new List<string>();
            using (readFromFile)
            {
                string currentRow = readFromFile.ReadLine();
                while (currentRow != null)
                {
                    allRows.Add(currentRow);
                    currentRow = readFromFile.ReadLine();
                }
            }
            return allRows;
        }
    }
}
