using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace CourierManager
{

    public class CompanyCustomer : Customer
    {
        private string pathToDatabase="../../CompanyCustomers.txt";

        public string PathToDatabase
        {
            get { return pathToDatabase; }
            set { pathToDatabase= value; }
        }
        
        public CompanyStatute Statute { get; set; }

        public string CompanyName { get; set; }

        private List<string> ClientsList { get; set; }

        public bool WillWrite { get; set; }

        public CompanyCustomer(string companyName, string address, ulong idNumber, ulong phone, bool willWrite=true)
            : base(address, idNumber, phone)
        {
            this.Statute = CompanyStatute.New;
            this.CompanyName = companyName;
            this.WillWrite = willWrite;
            //this.ClientsList = this.ReadClientData();

            if (this.IsANewCustomer && this.WillWrite)
            {
                this.ClientNumber = this.ClientsList.Count;
                this.SaveClientData();
            }
        }

        public override List<string> ReadClientData()
        {
            List<string> companyCustomers = new List<string>();

            StreamReader reader = new StreamReader(this.PathToDatabase);
            int lineCounter = 1;   //count the number of the lines - this value is the ClientsNumber for every customer
            using (reader)
            {
                string currentLine = reader.ReadLine();

                while (currentLine != null)
                {
                    string[] splitLine = currentLine.Split('*');
                    if (splitLine[3] == this.IDNumber.ToString())
                    {
                        this.IsANewCustomer = false;
                        this.ClientNumber = lineCounter;
                    }
                    companyCustomers.Add(currentLine);
                    currentLine = reader.ReadLine();
                    lineCounter++;
                }
            }
            return companyCustomers;
        }

        public override void SaveClientData()
        {
            StreamWriter writer = new StreamWriter(this.PathToDatabase, true);
            using (writer)
            {
                string currentCompany = String.Format("{0}*{1}*{2}*{3}*{4}*{5}", this.ClientNumber+1, this.CompanyName, this.Address,
                                this.IDNumber, this.Phone, this.Statute);
                writer.WriteLine(currentCompany);
            }
        }

        public override bool ValidateIDNumber()
        {
            try
            {
                string EIK = this.IDNumber.ToString();
                if (EIK.Length != 9 && EIK.Length != 13)
                {
                    throw new InvalidIDNumberException("Invalid ID number", this.IDNumber);
                }
                int checkSum1 = 0;
                int checkSum2 = 0;
                for (int i = 0; i < 8; i++)
                {
                    char currentDigit = EIK[i];
                    if (!Char.IsDigit(currentDigit))
                    {
                        throw new InvalidIDNumberException("Invalid ID number", this.IDNumber);
                    }
                    checkSum1 += (currentDigit-48) * (i + 1);
                    checkSum2 += (currentDigit-48) * (i + 3);
                }
                int controlDigit = checkSum1 % 11;
                if (controlDigit == 10)
                    controlDigit = checkSum2 % 11;
                if (controlDigit == 10)
                    controlDigit = 0;
                if (Convert.ToInt16(EIK[8]) != controlDigit + 48)
                {
                    return false;
                }
                if (EIK.Length == 13)
                {
                    int[] weight1 = { 2, 7, 3, 5 };
                    int[] weight2 = { 4, 9, 5, 7 };
                    checkSum1 = 0;
                    checkSum2 = 0;
                    for (int i = 8; i < 13; i++)
                    {
                        char currentDigit = EIK[i];
                        if (!Char.IsDigit(currentDigit))
                        {
                            throw new InvalidIDNumberException("Invalid ID number", this.IDNumber);
                        }
                        checkSum1 += (currentDigit-48) * weight1[i - 8];
                        checkSum2 += (currentDigit-48) * weight2[i - 8];
                    }
                    if (controlDigit + 48 != Convert.ToInt16(EIK[12]))
                    {
                        throw new InvalidIDNumberException("Invalid ID number", this.IDNumber);
                    }
                }
            }

            catch (InvalidIDNumberException iIDe)
            {
                return false;
            }
            return true;
        }
    }
}
