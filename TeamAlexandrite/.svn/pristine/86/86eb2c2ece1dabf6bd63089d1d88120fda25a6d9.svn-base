using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
namespace CourierManager
{
    public class IndividualCustomer : Customer, IPerson
    {
        //private string filePath;

        private List<string> ClientsList { get; set; }
        public string FirstName
        {
            get;
            set;
        }

        public string LastName
        {
            get;
            set;
        }

        public IndividualCustomer(string firstName, string lastName, string address, ulong idNumber, ulong phone)
            : base(address, idNumber, phone)
        {
            this.FirstName = firstName;
            this.LastName = lastName;
            this.ClientsList = this.ReadClientData();
            if (this.IsANewCustomer == true)
            {
                //see comments in CompanyCustomer.cs
                this.ClientNumber = this.ClientsList.Count;
                this.SaveClientData();
            }
        }

        public override List<string> ReadClientData()
        {
            List<string> individualCustomers = new List<string>();

            StreamReader reader = new StreamReader(@"..\..\IndividualCustomers.txt");
            int lineCounter = 1;
            using (reader)
            {
                string currentLine = reader.ReadLine();
                while (currentLine != null)
                {
                    string[] splitLine = currentLine.Split('*');
                    if (splitLine[4] == this.IDNumber.ToString())
                    {
                        this.IsANewCustomer = false;
                        this.ClientNumber = lineCounter;
                    }
                    lineCounter++;
                    individualCustomers.Add(currentLine);
                    currentLine = reader.ReadLine();
                }
            }
            return individualCustomers;
        }

        public override void SaveClientData()
        {
            StreamWriter writer = new StreamWriter(@"..\..\IndividualCustomers.txt", true);
            using (writer)
            {
                string individual = String.Format("{0}*{1}*{2}*{3}*{4}*{5}", this.ClientNumber, this.FirstName, this.LastName,
                this.Address, this.IDNumber, this.Phone);
                writer.WriteLine(individual);
            }
        }

        public override bool ValidateIDNumber()
        {
            try
            {
                string userIDNumber = this.IDNumber.ToString();
                if (userIDNumber.Length != 10)
                {
                    throw new InvalidIDNumberException("Invalid ID number", this.IDNumber);
                }
                foreach (char digit in userIDNumber)
                {
                    if (!Char.IsDigit(digit))
                    {
                        throw new InvalidIDNumberException("Invalid ID number", this.IDNumber);
                    }
                }
                int month = int.Parse(userIDNumber.Substring(2, 2));
                int year = 0;
                if (month < 13)
                {
                    year = int.Parse("19" + userIDNumber.Substring(0, 2));
                }
                else if (month < 33)
                {
                    month -= 20;
                    year = int.Parse("18" + userIDNumber.Substring(0, 2));
                }
                else
                {
                    month -= 40;
                    year = int.Parse("20" + userIDNumber.Substring(0, 2));
                }
                int day = int.Parse(userIDNumber.Substring(4, 2));
                DateTime dateOfBirth = new DateTime();
                if (!DateTime.TryParse(String.Format("{0}/{1}/{2}", day, month, year), out dateOfBirth))
                {
                    throw new InvalidIDNumberException("Invalid ID number", this.IDNumber);
                }
                int[] weights = new int[] { 2, 4, 8, 5, 10, 9, 7, 3, 6 };
                int totalControlSum = 0;
                for (int i = 0; i < 9; i++)
                {
                    totalControlSum += weights[i] * (userIDNumber[i] - '0');
                }
                int controlDigit = 0;
                int reminder = totalControlSum % 11;
                if (reminder < 10)
                {
                    controlDigit = reminder;
                }
                int lastDigitFromIDNumber = int.Parse(userIDNumber.Substring(9));
                if (lastDigitFromIDNumber != controlDigit)
                {
                    throw new InvalidIDNumberException("Invalid ID number", this.IDNumber);
                }
            }
            catch (InvalidIDNumberException iIDe)
            {
                Console.WriteLine(iIDe.Message);
            }
            return true;
        }
    }
}
